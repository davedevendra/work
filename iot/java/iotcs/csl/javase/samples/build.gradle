/*
 * Copyright (c) 2015, 2016, Oracle and/or its affiliates.  All rights reserved.
 *
 * This software is dual-licensed to you under the MIT License (MIT) and 
 * the Universal Permissive License (UPL).  See the LICENSE file in the root
 * directory for license terms.  You may choose either license, or both.
 */

/******************************************************************************
 *                              Build Options                                 
 * -PWITH_ENUMERATION - (default true) includes Resource and Message
 *     enumeration.
 *     If set to false Resource and Message enumeration support are excluded
 *     from enterprise-library.jar
 *
 * -PWITH_VIRTUALIZATION - (default true) includes virtualization support in 
 *     device-library.jar. If set to false virtualization support is 
 *     excluded from device-library.jar.
 *     
 *****************************************************************************/
def withVirtualization = Boolean.TRUE
def withEnumeration = Boolean.TRUE

if (project.hasProperty("WITH_VIRTUALIZATION")) {
    withVirtualization = 
        Boolean.parseBoolean(WITH_VIRTUALIZATION).booleanValue()
}
if (project.hasProperty("WITH_ENUMERATION")) {
    withEnumeration = Boolean.parseBoolean(WITH_ENUMERATION).booleanValue()
}
apply plugin: 'java'

if (!project.hasProperty("CLIENT_LIBRARY_HOME")) {
    ext.CLIENT_LIBRARY_HOME = "${project.projectDir}/.."
}

// dependencies
def DEVICE_LIBRARY_JAR = "${CLIENT_LIBRARY_HOME}/lib/device-library.jar"
def ENTERPRISE_LIBRARY_JAR = "${CLIENT_LIBRARY_HOME}/lib/enterprise-library.jar"
def JSON_JAR = "${CLIENT_LIBRARY_HOME}/lib/json-20160212.jar"

def JAR_BASE_NAME = "iotcs-csl-samples"
def JAR_VERSION = "1.1.0"
def SAMPLES_IMPL_TITLE = "IoT Client Library Samples"

def ADV_JAR_BASE_NAME = "iotcs-csl-samples-advanced"
def ADV_JAR_VERSION = "1.1.0"
def SAMPLES_ADVANCED_IMPL_TITLE = "IoT Client Library Samples Advanced"

defaultTasks 'clean', 'jar'

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            include '**/sample/*'
            include '**/sample/obd2/*'
            exclude '**/sample/ext/*'
            if (!withVirtualization) {
                exclude '**/sample/DirectlyConnectedDeviceSample.java'
                exclude '**/sample/GatewayDeviceSample.java'
            }
        }
    }
    advanced {
        java {
            srcDir 'src/main/java'
            srcDir 'advanced/src/main/java'
            include '**/sample/ext/*'
            include '**/sample/HumiditySensor.java'
            include '**/sample/TemperatureSensor.java'
            if (!withVirtualization) {
                exclude '**/ext/GatewayDeviceSample.java'
            }
        }
    }
}

dependencies {
    compile files(DEVICE_LIBRARY_JAR, ENTERPRISE_LIBRARY_JAR, JSON_JAR)
    advancedCompile files(DEVICE_LIBRARY_JAR, ENTERPRISE_LIBRARY_JAR, JSON_JAR)
}

task samplesJar(type: Jar) {

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    baseName = JAR_BASE_NAME
    from(sourceSets.main.output)

    manifest {
         attributes("Implementation-Title" : SAMPLES_IMPL_TITLE,
                    "Implementation-Version" : JAR_VERSION)
    }
}

task advancedJar(type: Jar) {

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    baseName = ADV_JAR_BASE_NAME

    from(sourceSets.advanced.output)

    manifest {
         attributes("Implementation-Title" : SAMPLES_ADVANCED_IMPL_TITLE,
                    "Implementation-Version" : ADV_JAR_VERSION)
    }
}

// Use this jar task to hang the other jar tasks from
task jar(type: Jar, overwrite: true) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    doLast {
        delete archivePath
    }
}
jar.dependsOn(samplesJar)
jar.dependsOn(advancedJar)

// Even though assemble calls the jar task, the jar task's dependent tasks
// are not called
assemble.dependsOn(samplesJar)
assemble.dependsOn(advancedJar)

task dist(type: Copy, dependsOn: build) {
    from(samplesJar.archivePath)
    from(advancedJar.archivePath)
    into "build/dist"
}
